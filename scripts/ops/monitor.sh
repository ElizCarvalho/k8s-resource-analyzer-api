#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Vari√°veis
APP_NAME="k8s-resource-analyzer-api"
PORT=${PORT:-9000}
INTERVAL=${INTERVAL:-5}

# Fun√ß√£o para verificar sa√∫de da aplica√ß√£o
check_health() {
    local response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${PORT}/api/v1/ping)
    if [ "$response" == "200" ]; then
        echo -e "${GREEN}‚úÖ API est√° saud√°vel (HTTP 200)${NC}"
    else
        echo -e "${RED}‚ùå API n√£o est√° respondendo corretamente (HTTP $response)${NC}"
    fi
}

# Fun√ß√£o para coletar m√©tricas do sistema
collect_system_metrics() {
    echo -e "\n${BLUE}üìä M√©tricas do Sistema:${NC}"
    echo -e "${YELLOW}CPU:${NC}"
    top -bn1 | grep "Cpu(s)" | awk '{print "  Uso: " $2 "%"}'
    
    echo -e "\n${YELLOW}Mem√≥ria:${NC}"
    free -m | awk 'NR==2{printf "  Total: %s MB, Usado: %s MB, Livre: %s MB\n", $2,$3,$4}'
    
    echo -e "\n${YELLOW}Disco:${NC}"
    df -h | awk '$NF=="/"{printf "  Total: %s, Usado: %s, Livre: %s\n", $2,$3,$4}'
}

# Fun√ß√£o para coletar m√©tricas da aplica√ß√£o
collect_app_metrics() {
    echo -e "\n${BLUE}üìà M√©tricas da Aplica√ß√£o:${NC}"
    
    # Processos
    local process_count=$(ps aux | grep ${APP_NAME} | grep -v grep | wc -l)
    echo -e "${YELLOW}Processos:${NC}"
    echo "  Ativos: $process_count"
    
    # Portas
    echo -e "\n${YELLOW}Portas:${NC}"
    netstat -tlpn 2>/dev/null | grep ${PORT} || echo "  Nenhuma porta encontrada"
    
    # Logs recentes
    echo -e "\n${YELLOW}Logs Recentes:${NC}"
    tail -n 5 ./logs/${APP_NAME}.log 2>/dev/null || echo "  Nenhum log encontrado"
}

# Fun√ß√£o para mostrar estat√≠sticas do projeto
show_project_stats() {
    echo -e "\n${BLUE}üìÅ Estat√≠sticas do Projeto:${NC}"
    
    echo -e "${YELLOW}C√≥digo:${NC}"
    echo "  Arquivos Go: $(find . -name '*.go' -not -path './vendor/*' | wc -l)"
    echo "  Linhas de c√≥digo: $(find . -name '*.go' -not -path './vendor/*' | xargs wc -l 2>/dev/null | tail -n 1 | awk '{print $1}')"
    
    echo -e "\n${YELLOW}Git:${NC}"
    echo "  Commits: $(git rev-list --count HEAD 2>/dev/null || echo 'N/A')"
    echo "  Branch atual: $(git branch --show-current 2>/dev/null || echo 'N/A')"
    echo "  √öltimo commit: $(git log -1 --format=%cd --date=relative 2>/dev/null || echo 'N/A')"
}

# Fun√ß√£o principal de monitoramento
monitor() {
    while true; do
        clear
        echo -e "${BLUE}üîç Monitoramento do ${APP_NAME}${NC}"
        echo -e "Hora: $(date '+%Y-%m-%d %H:%M:%S')\n"
        
        check_health
        collect_system_metrics
        collect_app_metrics
        show_project_stats
        
        echo -e "\n${YELLOW}Atualizando em ${INTERVAL} segundos...${NC}"
        sleep ${INTERVAL}
    done
}

# Menu de op√ß√µes
show_menu() {
    echo -e "${BLUE}üîß Ferramentas de Monitoramento${NC}\n"
    echo "1. Iniciar monitoramento cont√≠nuo"
    echo "2. Verificar sa√∫de da aplica√ß√£o"
    echo "3. Mostrar m√©tricas do sistema"
    echo "4. Mostrar m√©tricas da aplica√ß√£o"
    echo "5. Mostrar estat√≠sticas do projeto"
    echo "6. Sair"
    echo -e "\nEscolha uma op√ß√£o: "
}

# Loop principal
while true; do
    show_menu
    read -r opt
    
    case $opt in
        1) monitor ;;
        2) check_health ;;
        3) collect_system_metrics ;;
        4) collect_app_metrics ;;
        5) show_project_stats ;;
        6) echo -e "${GREEN}Encerrando...${NC}"; exit 0 ;;
        *) echo -e "${RED}Op√ß√£o inv√°lida${NC}" ;;
    esac
    
    if [ "$opt" != "1" ]; then
        echo -e "\nPressione ENTER para continuar..."
        read -r
    fi
done 